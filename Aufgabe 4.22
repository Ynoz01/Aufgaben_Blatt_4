/*
Aufgabe 4.4

Implementieren Sie ein vereinfachtes Excel-Programm calculateTable(int [] array, char command), das in Abhängigkeit von command folgendes berechnet:

Im Falle von command i wird das array beginnend mit dem Wert 10 fortlaufend initialisiert und die alten Werte überschrieben (s. Testfall).
Im Falle von command r werden alle Werte des array nach rechts verschoben; die "leeren" Zellen mit 0 initialisiert. (s. Testfall)
Im Falle von command s wird ein um jeweils eine Spalte und Zeile erweitertes Array zurückgeliefert, dass in der neuen Spalte die Summe aller Zeilen und in der neuen Zeile die Summe aller Spalten speichert. (s.Testfall)
Zum Beispiel:

Test	
int[][] a = { 
  {10,  11,  12,  13,  14},
  {15,  16,  17,  18,  19},
  {20,  21,  22,  23,  24},
  {25,  26,  27,  28,  29}
};
int[][] newA = calculateTable(a,'s');

for (int i = 0; i < newA.length;i++)
  System.out.println(Arrays.toString(newA[i]));
  
  Resultat
[10, 11, 12, 13, 14, 60]
[15, 16, 17, 18, 19, 85]
[20, 21, 22, 23, 24, 110]
[25, 26, 27, 28, 29, 135]
[70, 74, 78, 82, 86, 0]

Test
int[][] a = { 
  {101,  111,  112,  113,  114},
  {5,  216,  317,  418,  219},
  {0,  21,  28,  4,  20},
  {5,  6,  7, 38,  40}
};
int [][] newA = calculateTable(a,'i');

for (int i = 0; i < newA.length;i++)
  System.out.println(Arrays.toString(newA[i]));
  
  Resultat
[10, 11, 12, 13, 14]
[15, 16, 17, 18, 19]
[20, 21, 22, 23, 24]
[25, 26, 27, 28, 29]

Test
int[][] a = { 
  {10,  11,  12,  13,  14},
  {15,  16,  17,  18,  19},
  {20,  21,  22,  23,  24},
  {25,  26,  27,  28,  29}
};
int[][] newA = calculateTable(a,'r');

for (int i = 0; i < newA.length;i++)
  System.out.println(Arrays.toString(newA[i]));
  
  Resultat
[0, 10, 11, 12, 13]
[0, 15, 16, 17, 18]
[0, 20, 21, 22, 23]
[0, 25, 26, 27, 28]
*/

//CODE BEGINN
public static int[][] calculateTable(int[][] array, char cmd)
	{
		int z=0;
		int n = array.length;
		int colms = array[0].length;
		int tmp = 0;
		int tmp2 = 0;
		switch(cmd)
		{
			case'i':
			{
				if(array.length==1 && array[0].length==0)
					return array;
				else
				{
					for(int j = 0; j<n; j++)
					{
						for(int k = 0; k<colms; k++)
						{	
							if(j==0)
								array[j][k] = 10 + k;
							else
							array[j][k] = z + k + 1;
						}	
						if(array[0].length>1)
    					    z = array[j][array.length-1]+1;
    					else
    					z= array[j][array[0].length-1];
					}
					return array;
				}
			}
			case'r':
			{	
				
				if(array.length <= 3 && array[0].length <= 1)
				{
				    if(array.length==1 && array[0].length <=1)
				    {
				    	if(array[0].length==0)
				    	{
				            return array;
				    	}
				    	else
				    	{
				    		array[0][0] = 0;
				    	}
				    }
				    else
				    {
					    for(int j = 0; j<n;j++ )
					       array[j][0] = 0;
				    }
				}
				else
				{
					for(int j = 0; j<n; j++)
					{
						for(int k = 0; k<n; k++)
						{	
							if(k==0)
							{
								tmp = array[j][k];
								array[j][k]=0;
								tmp2 = array[j][k+1];
								array[j][k+1] = tmp;
							}
							else
							{
								
								if(k%2!=0)
								{
									tmp = array[j][k+1];
									array[j][k+1] = tmp2;
								}
								else
								{
									tmp2 = array[j][k+1];
									array[j][k+1] = tmp;
								}
							}
						}
					}
				}
				return array;
				
			}
			case's':
			{
				int[][] great = new int[n+1][colms+1];
				int sumr = 0;
				int grlength = great.length;
				int gclength = great[1].length;
				int j = 0;
				int k = 0;
				int[][] cop = new int[1][n+1];
				
				
				
				{
					for(j = 0; j < grlength; j++)
					{
						sumr = 0;
						for(k = 0; k < gclength; k++)
						{
							if(k<gclength-1 && j<grlength-1)
							{
								sumr += array[j][k];
								tmp = array[j][k];
							}
							
							if(k==gclength-1)
								great[j][k] = sumr;
							else
								great[j][k] = tmp;							
						}
					}
					
					for(j = 0 ; j < gclength; j++)
					{
						sumr = 0;
						for(k = 0; k < grlength-1; k++)
						{
							sumr += great[k][j];						
						}
						if(j==gclength-1)
							great[k][j] =0;
						else
							great[k][j] = sumr;
					}
				}									
				return great;				
			}
			default:
			{
				return array;
			}
		}		
	}
